{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Verify OpenRouter API Key with DeepSeek Model",
        "description": "Test task to ensure the new OpenRouter API key is correctly configured and can successfully interact with the DeepSeek model.",
        "details": "1. Obtain the new OpenRouter API key from the configuration settings. 2. Set up a test environment with the necessary dependencies installed. 3. Write a test script in Python to send a sample request to the DeepSeek model using the OpenRouter API key. 4. Include error handling to catch and log any issues with the API key or request. 5. Verify the response from the DeepSeek model to ensure it matches the expected output. 6. Document the results and any issues encountered.",
        "testStrategy": "1. Run the test script in the test environment. 2. Check the console output for any error messages related to the API key or request. 3. Verify that the response from the DeepSeek model is correct and matches the expected output. 4. Review the logs to ensure all steps were executed without errors. 5. If any issues are found, document them and retest after making necessary adjustments.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Build Comprehensive Pure Supabase Backend for Dutyback Helper Application",
        "description": "Create a complete, production-ready Supabase backend to power the existing Next.js frontend webapp, including Edge Functions, Auth, Database with RLS, Storage, and Realtime.",
        "details": "1. Set up a new Supabase project and configure the necessary services (Auth, Database, Storage, Realtime). 2. Design and implement the PostgreSQL database schema with Row Level Security (RLS) policies for Users, Claims, Identifiers (MRN/EORI), Evidence, Outcomes, and Updates tables. 3. Develop Supabase Edge Functions to handle API logic for user authentication, claim creation and management, evidence upload and validation, MRN/EORI identifier management, PDF export, policy monitoring, outcome tracking, and real-time notifications. 4. Implement Supabase Auth for user registration, login, and profile management. 5. Configure Supabase Storage for secure file uploads and downloads. 6. Set up Supabase Realtime for live updates and notifications. 7. Ensure GDPR compliance and HMRC integration requirements are met. 8. Write TypeScript code throughout the backend implementation.",
        "testStrategy": "1. Verify that the Supabase project is correctly set up and all services are operational. 2. Test the database schema and RLS policies by creating, reading, updating, and deleting records for each table. 3. Test each Edge Function by sending requests from the frontend and verifying the responses. 4. Test user authentication and profile management by registering, logging in, and updating user profiles. 5. Test file uploads and downloads using Supabase Storage. 6. Verify real-time updates and notifications using Supabase Realtime. 7. Conduct security and compliance checks to ensure GDPR and HMRC requirements are met.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Supabase Project",
            "description": "Create and configure a new Supabase project with necessary services including Auth, Database, Storage, and Realtime.",
            "dependencies": [],
            "details": "Set up a new Supabase project and configure the necessary services (Auth, Database, Storage, Realtime).\n<info added on 2025-09-13T22:00:52.548Z>\nSupabase Project Analysis Complete:\n\n✅ **Project Status**: Active and operational\n- Project URL: https://rrlfoisdeoalfbmtzdoj.supabase.co\n- Anon Key: Available and configured\n- Service Role Key: Available and configured\n\n✅ **Database Schema**: Already implemented with RLS enabled\n- users table: User profiles with auth integration\n- claims table: Main claims with all required fields (channel, vat_status, amounts, etc.)\n- evidence table: File management with required/optional flags\n- identifiers table: MRN/EORI tracking\n- outcomes table: Decision tracking and refunds\n- policy_updates & policy_diffs: Policy monitoring system\n\n✅ **RLS Policies**: All tables have Row Level Security enabled\n\n❌ **Edge Functions**: None currently deployed - need to create\n❌ **Storage Buckets**: Need to verify and configure for evidence files\n❌ **Realtime**: Need to verify configuration\n\n**Next Steps**: \n1. Create Edge Functions for API logic\n2. Configure Storage buckets for evidence files\n3. Set up Realtime for live updates\n4. Test all services integration\n</info added on 2025-09-13T22:00:52.548Z>\n<info added on 2025-09-13T22:01:06.303Z>\n✅ **Storage**: Evidence bucket configured and ready\n- Bucket name: \"evidence\" \n- Public access: false (secure)\n\n✅ **Realtime**: Configured and operational\n- Publication: \"supabase_realtime\" active\n- Supports: INSERT, UPDATE, DELETE operations\n\n**All Supabase Services Status:**\n✅ Database with RLS policies\n✅ Auth integration ready\n✅ Storage bucket configured\n✅ Realtime enabled\n❌ Edge Functions (need to create)\n\n**Subtask 2.1 Complete** - Supabase project is fully configured and ready for Edge Functions development.\n</info added on 2025-09-13T22:01:06.303Z>",
            "status": "done",
            "testStrategy": "Verify that the Supabase project is correctly set up and all services are operational."
          },
          {
            "id": 2,
            "title": "Design Database Schema",
            "description": "Design and implement the PostgreSQL database schema with Row Level Security (RLS) policies for Users, Claims, Identifiers (MRN/EORI), Evidence, Outcomes, and Updates tables.",
            "dependencies": [],
            "details": "Design and implement the PostgreSQL database schema with Row Level Security (RLS) policies for Users, Claims, Identifiers (MRN/EORI), Evidence, Outcomes, and Updates tables.",
            "status": "done",
            "testStrategy": "Test the database schema and RLS policies by creating, reading, updating, and deleting records for each table."
          },
          {
            "id": 3,
            "title": "Develop Edge Functions",
            "description": "Develop Supabase Edge Functions to handle API logic for user authentication, claim creation and management, evidence upload and validation, MRN/EORI identifier management, PDF export, policy monitoring, outcome tracking, and real-time notifications.",
            "dependencies": [],
            "details": "Develop Supabase Edge Functions to handle API logic for user authentication, claim creation and management, evidence upload and validation, MRN/EORI identifier management, PDF export, policy monitoring, outcome tracking, and real-time notifications.\n<info added on 2025-09-13T22:04:03.921Z>\nSuccessfully deployed 5 core Edge Functions: create-claim, get-claims, update-claim, upload-evidence, and user-profile. Each function includes JWT authentication, comprehensive error handling, CORS support, TypeScript type definitions, input validation, and business rule enforcement. The create-claim function validates claim type, channel, and VAT status while creating default evidence requirements. The get-claims function supports status filtering, pagination, and sorting with full CORS support. The update-claim function prevents modification of submitted/approved/rejected claims and validates enum values and business rules. The upload-evidence function validates file size and types, uploads to Supabase Storage, and updates evidence records. The user-profile function manages user profile data with validation for phone numbers and address fields. Additionally, the claim-statistics function generates comprehensive claim analytics including total claims, status breakdown, type breakdown, channel breakdown, total refund amounts, success rates, and average processing times. All core API endpoints are now ready for frontend integration with the Next.js application.\n</info added on 2025-09-13T22:04:03.921Z>",
            "status": "done",
            "testStrategy": "Test each Edge Function by sending requests from the frontend and verifying the responses."
          },
          {
            "id": 4,
            "title": "Implement Supabase Auth",
            "description": "Implement Supabase Auth for user registration, login, and profile management.",
            "dependencies": [],
            "details": "Implement Supabase Auth for user registration, login, and profile management.\n<info added on 2025-09-13T22:06:10.991Z>\nSuccessfully deployed 4 authentication edge functions: register-user, login-user, reset-password, and logout-user. Features include complete user registration and login flow, password reset with email verification, JWT token management and validation, user profile integration, security best practices, CORS support, and comprehensive error handling. Ready for frontend integration with Next.js.\n</info added on 2025-09-13T22:06:10.991Z>",
            "status": "done",
            "testStrategy": "Verify user registration, login, and profile management functionalities."
          },
          {
            "id": 5,
            "title": "Configure Supabase Storage and Realtime",
            "description": "Configure Supabase Storage for secure file uploads and downloads, and set up Supabase Realtime for live updates and notifications.",
            "dependencies": [],
            "details": "Configure Supabase Storage for secure file uploads and downloads. Set up Supabase Realtime for live updates and notifications.\n<info added on 2025-09-13T22:06:53.727Z>\n✅ **Supabase Storage Configuration:**\n- **Evidence Bucket**: Properly configured and operational\n  - Name: \"evidence\"\n  - Public access: false (secure)\n  - File size limit: 10MB\n  - Allowed MIME types: PDF, JPEG, PNG, GIF, Word docs, text files\n  - RLS policies: Users can only access their own files\n\n✅ **Storage RLS Policies Implemented:**\n- Service role can manage all evidence files\n- Users can upload own evidence files (with user ID folder structure)\n- Users can view own evidence files\n- Users can update own evidence files\n- Users can delete own evidence files\n\n✅ **Supabase Realtime Configuration:**\n- **Publication**: \"supabase_realtime\" active and operational\n- **Enabled Tables**: \n  - public.claims (for real-time claim updates)\n  - public.evidence (for real-time evidence upload status)\n  - public.outcomes (for real-time decision notifications)\n- **Operations**: INSERT, UPDATE, DELETE, TRUNCATE supported\n\n✅ **Integration Ready:**\n- Storage bucket ready for evidence file uploads\n- Realtime ready for live updates and notifications\n- All policies properly configured for security\n- Frontend can now implement real-time features\n\n**All Supabase Services Fully Operational** - Database, Auth, Storage, and Realtime are all configured and ready for production use.\n</info added on 2025-09-13T22:06:53.727Z>",
            "status": "done",
            "testStrategy": "Test file uploads and downloads, and verify real-time updates and notifications."
          }
        ]
      },
      {
        "id": 3,
        "title": "Build Comprehensive Homepage for Dutyback Helper",
        "description": "Create a responsive and visually appealing homepage for Dutyback Helper, including Hero Section, How It Works, Stats Preview, FAQ, Pricing, Trust Indicators, and Navigation.",
        "details": "1. **Hero Section**: Implement a clear value proposition with a compelling headline and a prominent CTA button to start claims. Use responsive design to ensure it looks great on all devices. 2. **How It Works**: Create a visual explanation of the 3-step process (Router → MRN/EORI Assistant → Evidence Pack) using icons and brief descriptions. 3. **Stats Preview**: Display key metrics like approval rates, average refund amounts, and processing times using dynamic data from the backend. 4. **FAQ Section**: List common questions about duty refunds, HMRC processes, and the service with collapsible answers. 5. **Pricing Section**: Clearly present pricing tiers (Free triage, £9 basic pack, £19 premium pack) with a comparison table. 6. **Trust Indicators**: Include testimonials, security badges, and other credibility markers to build trust. 7. **Navigation**: Implement a navigation bar with links to all major sections (Wizard, Dashboard, Stats, Support). Ensure the homepage is fully responsive and optimized for performance.",
        "testStrategy": "1. Verify that the Hero Section displays correctly on all devices and the CTA button redirects to the claims page. 2. Check that the How It Works section accurately represents the 3-step process and is visually clear. 3. Ensure the Stats Preview dynamically updates with data from the backend. 4. Test the FAQ Section to confirm that questions expand and collapse correctly. 5. Verify that the Pricing Section displays all tiers correctly and any interactive elements work as expected. 6. Check that Trust Indicators are visible and correctly placed. 7. Test the Navigation bar to ensure all links redirect to the correct sections. 8. Perform cross-browser and cross-device testing to ensure responsiveness and visual consistency.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Build Comprehensive Dashboard with Claim Tracking and Reminder System",
        "description": "Create a user dashboard that provides complete claim management functionality, including claim list view, status tracking, reminder system, resume functionality, filtering & sorting, quick actions, progress indicators, deadline alerts, claim details, and bulk actions.",
        "details": "1. **Claim List View**: Implement a table or grid to display all user claims with status indicators, creation dates, and current progress. Use Supabase real-time updates to keep the data current. 2. **Status Tracking**: Add visual indicators (e.g., icons, colors) for each claim status (draft, identifiers pending, evidence missing, exported, submitted, decided). 3. **Reminder System**: Integrate HMRC deadline timers with countdown displays and notifications. Use Supabase Edge Functions to calculate deadlines and send notifications. 4. **Resume Functionality**: Add 'Resume' buttons to re-enter the claim wizard at the last incomplete step. Store the last step in the Supabase database. 5. **Filtering & Sorting**: Implement filters for status, date, courier, and claim type. Add sorting options for date and status. 6. **Quick Actions**: Add buttons for exporting claim packs, updating evidence, and contacting support. Use Supabase Edge Functions for these actions. 7. **Progress Indicators**: Add visual progress bars showing the completion status of each claim. 8. **Deadline Alerts**: Display prominent warnings for approaching deadlines. Use Supabase real-time updates to trigger alerts. 9. **Claim Details**: Implement expandable cards showing full claim information. 10. **Bulk Actions**: Add functionality to select multiple claims for batch operations like exporting or updating status.",
        "testStrategy": "1. Verify that the Claim List View displays all user claims with correct status indicators, creation dates, and progress. 2. Check that the Status Tracking visual indicators correctly reflect each claim status. 3. Test the Reminder System by verifying that HMRC deadline timers and notifications work as expected. 4. Ensure the Resume Functionality correctly re-enters the claim wizard at the last incomplete step. 5. Test the Filtering & Sorting functionality by applying various filters and sorting options. 6. Verify that Quick Actions (export, update evidence, contact support) work correctly. 7. Check that Progress Indicators accurately show the completion status of each claim. 8. Test Deadline Alerts by verifying that warnings are displayed for approaching deadlines. 9. Ensure that Claim Details expandable cards show full claim information. 10. Verify that Bulk Actions work correctly for selected claims.",
        "status": "pending",
        "dependencies": [
          2,
          3
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Build Outcome Stats Page with Analytics and Telemetry",
        "description": "Create a comprehensive analytics page that displays anonymized outcome data to provide insights and build trust.",
        "details": "1. **Approval Rate Statistics**: Fetch and display overall approval percentage and breakdown by claim type from the Outcomes table in Supabase. 2. **Decision Time Analytics**: Calculate and show median days to decision and average processing times by courier. 3. **Refund Amount Analysis**: Display average refund amounts and success rates by claim value. 4. **Courier Performance**: Compare success rates and response times across DHL, FedEx, UPS, Royal Mail. 5. **Claim Type Success Rates**: Show performance metrics for CDS, C285, BOR286, C&E1179, VAT Return, Seller Refund. 6. **Time-based Trends**: Implement monthly/quarterly performance trends and seasonal patterns. 7. **Interactive Charts**: Use charting libraries (e.g., Chart.js) to create visual representations. 8. **Filtering Options**: Add filters for date range, courier, claim type, and refund amount. 9. **Export Functionality**: Implement report download options in CSV and PDF formats. 10. **Real-time Updates**: Use Supabase Realtime to keep data current. Ensure all data is anonymized to protect user privacy.",
        "testStrategy": "1. Verify that all statistics and analytics are correctly fetched and displayed from the Outcomes table. 2. Test the accuracy of decision time analytics and refund amount analysis. 3. Check that courier performance and claim type success rates are correctly compared and displayed. 4. Validate time-based trends and ensure they reflect accurate monthly/quarterly data. 5. Test interactive charts for correct data representation and responsiveness. 6. Verify filtering options work as expected and update the displayed data accordingly. 7. Test export functionality to ensure reports are correctly generated and downloadable. 8. Confirm real-time updates are functioning and data is current.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Build Support & Updates Page with GOV.UK Policy Tracking",
        "description": "Create a comprehensive support page that monitors HMRC policy changes and provides user assistance, including policy drift monitoring, changelog system, escalation templates, FAQ section, contact support, documentation links, status page, update notifications, search functionality, and feedback system.",
        "details": "1. **Policy Drift Monitoring**: Implement a system to scrape GOV.UK for policy changes and store them in the Updates table. Display 'Last checked vs GOV.UK guidance' with timestamps. 2. **Changelog System**: Develop a feature to show policy differences and updates from GOV.UK scraping. 3. **Escalation Templates**: Create pre-written email templates for contacting HMRC or couriers. 4. **FAQ Section**: Build a comprehensive FAQ section with answers to common questions about duty refunds. 5. **Contact Support**: Integrate direct communication channels for user assistance. 6. **Documentation Links**: Provide links to official HMRC guidance and forms. 7. **Status Page**: Implement a system status page showing any known issues. 8. **Update Notifications**: Set up alerts to notify users when new policy changes are detected. 9. **Search Functionality**: Develop a search feature to allow users to search through FAQ and documentation. 10. **Feedback System**: Create a system for collecting and responding to user feedback.",
        "testStrategy": "1. Verify that the policy drift monitoring system correctly scrapes GOV.UK and updates the Updates table. 2. Test the changelog system to ensure it accurately displays policy differences and updates. 3. Check that the escalation templates are correctly formatted and functional. 4. Validate the FAQ section to ensure all answers are accurate and relevant. 5. Test the contact support channels to ensure they are functional and responsive. 6. Verify that the documentation links are correct and lead to the appropriate resources. 7. Check the status page to ensure it accurately reflects system status and known issues. 8. Test the update notifications to ensure they are triggered correctly when new policy changes are detected. 9. Validate the search functionality to ensure it correctly searches through FAQ and documentation. 10. Test the feedback system to ensure it collects and responds to user feedback appropriately.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Claim Pack Export System with PDF/ZIP Generation",
        "description": "Build a comprehensive claim pack export system that generates professional, HMRC-compliant documentation, including PDF generation, ZIP archive creation, HMRC form integration, evidence compilation, and custom branding.",
        "details": "1. **PDF Generation**: Use a library like PDFKit or Puppeteer to create professional PDF documents with claim details, evidence, and pre-filled HMRC forms. Ensure the documents are formatted with professional letterhead and Dutyback Helper branding. 2. **ZIP Archive Creation**: Use a library like JSZip to package all generated documents and uploaded evidence files into a downloadable ZIP file. 3. **HMRC Form Integration**: Pre-fill official HMRC forms (CDS, C285, BOR286, C&E1179) based on the claim route using form templates and dynamic data from the Supabase database. 4. **Evidence Compilation**: Include all uploaded evidence files in the correct format within the ZIP archive. 5. **Validation Checks**: Implement server-side validation to ensure all mandatory documents are included before export. 6. **Custom Branding**: Include Dutyback Helper branding and contact information in all documents. 7. **Multiple Formats**: Support both PDF and ZIP export options. 8. **Progress Tracking**: Show export progress and completion status to the user. 9. **Email Delivery**: Implement an option to email claim packs directly to users using Supabase Edge Functions.",
        "testStrategy": "1. Verify that PDF documents are correctly generated with all claim details, evidence, and pre-filled HMRC forms. 2. Test ZIP archive creation to ensure all documents and evidence files are included and correctly formatted. 3. Validate HMRC form integration by checking that forms are pre-filled with accurate data based on the claim route. 4. Ensure evidence compilation includes all uploaded files in the correct format. 5. Test validation checks to confirm that mandatory documents are included before export. 6. Verify custom branding is correctly applied to all documents. 7. Check that both PDF and ZIP export options are functional. 8. Test progress tracking to ensure export progress and completion status are displayed correctly. 9. Validate email delivery functionality by sending test claim packs to users.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Real-time Updates and Notification System",
        "description": "Build a comprehensive real-time notification system using Supabase Realtime to provide live updates, alerts, and notifications for various claim-related events and system updates.",
        "details": "1. **Real-time Claim Updates**: Use Supabase Realtime to listen for changes in the Claims table and push live updates to the frontend when claim status changes. 2. **Deadline Notifications**: Implement a system to calculate HMRC deadlines and send alerts when deadlines are approaching. Use Supabase Edge Functions to trigger notifications. 3. **Evidence Reminders**: Monitor the Evidence table and send notifications when evidence is missing or incomplete. 4. **Policy Change Alerts**: Integrate with the Updates table to send notifications when HMRC rules change. 5. **Courier Response Updates**: Listen for updates in the Identifiers table and send alerts when couriers respond to MRN/EORI requests. 6. **System Notifications**: Implement a system to send notifications for maintenance windows and feature updates. 7. **Email Notifications**: Configure Supabase to send backup email notifications for critical updates. 8. **Push Notifications**: Implement browser push notifications for immediate alerts. 9. **Notification Preferences**: Create a user-configurable notification settings interface. 10. **Notification History**: Store all notifications in the database for audit purposes.",
        "testStrategy": "1. Verify that real-time claim updates are correctly pushed to the frontend when claim status changes. 2. Test deadline notifications by checking that alerts are sent when HMRC deadlines are approaching. 3. Validate evidence reminders by ensuring notifications are sent when evidence is missing or incomplete. 4. Check that policy change alerts are sent when HMRC rules change. 5. Test courier response updates by verifying that alerts are sent when couriers respond to MRN/EORI requests. 6. Validate system notifications by checking that maintenance and feature update notifications are sent. 7. Verify that email notifications are sent for critical updates. 8. Test push notifications by ensuring they are received in the browser. 9. Check that notification preferences are configurable and respected. 10. Validate that all notifications are stored in the database for audit purposes.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Policy Drift Monitoring and GOV.UK Scraping System",
        "description": "Build an automated system to monitor HMRC policy changes by scraping GOV.UK pages, detecting changes, and updating the application accordingly.",
        "details": "1. **GOV.UK Scraping**: Develop a scraping mechanism using libraries like Puppeteer or Cheerio to extract policy information from key HMRC pages (import duty guidance, VAT return rules, claim form requirements). Ensure the scraper can handle GOV.UK page structure changes. 2. **Change Detection**: Implement a comparison algorithm to detect changes between the scraped policies and stored versions. Use checksums or diff algorithms for efficient comparison. 3. **Update Storage**: Store detected changes in the Updates table with timestamps. Ensure the storage mechanism is efficient and scalable. 4. **Change Classification**: Categorize changes by type (deadline changes, process updates, form changes) using predefined criteria. 5. **Impact Assessment**: Develop a system to determine which claims might be affected by policy changes. Use claim metadata and policy change details for this assessment. 6. **User Notifications**: Integrate with the real-time notification system (Task 8) to alert users whose claims might be impacted by changes. 7. **Change Log Display**: Create a user-friendly interface to display policy changes. Use a clear and concise format for presenting changes. 8. **Rollback Capability**: Implement a feature to revert to previous policy versions if needed. Ensure this feature is accessible to administrators. 9. **Scheduled Monitoring**: Set up a scheduled Supabase Edge Function to run weekly checks for policy updates. Ensure the function is robust and can handle failures gracefully. 10. **Manual Override**: Add functionality to manually trigger policy checks or updates. Ensure this feature is accessible to administrators.",
        "testStrategy": "1. Verify that the GOV.UK scraper correctly extracts policy information from key HMRC pages. Test with different page structures to ensure robustness. 2. Test the change detection algorithm by comparing known policy versions and verifying that changes are correctly detected. 3. Validate the update storage mechanism by checking that detected changes are correctly stored in the Updates table with timestamps. 4. Test the change classification system by verifying that changes are correctly categorized by type. 5. Validate the impact assessment system by checking that claims affected by policy changes are correctly identified. 6. Test user notifications by verifying that alerts are sent to users whose claims are impacted by changes. 7. Check the change log display by ensuring that policy changes are presented in a clear and user-friendly format. 8. Test the rollback capability by verifying that administrators can revert to previous policy versions. 9. Validate the scheduled monitoring by checking that the Supabase Edge Function runs weekly and correctly detects policy updates. 10. Test the manual override feature by verifying that administrators can manually trigger policy checks or updates.",
        "status": "pending",
        "dependencies": [
          2,
          8
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Advanced Analytics and Telemetry System",
        "description": "Build a comprehensive analytics system to track user behavior, claim success rates, and system performance, integrating with the existing Supabase backend and providing real-time dashboards.",
        "details": "1. **User Behavior Analytics**: Implement tracking for wizard completion rates, drop-off points, and user journeys using Supabase Realtime. 2. **Claim Success Metrics**: Monitor approval rates, decision times, and refund amounts by querying the Outcomes table. 3. **Courier Performance Tracking**: Analyze response times and success rates for MRN/EORI requests by integrating with the Identifiers table. 4. **Evidence Completion Rates**: Track which evidence types are most commonly missing by querying the Evidence table. 5. **Routing Accuracy Metrics**: Monitor how often the HMRC routing logic is correct by comparing routing decisions with actual outcomes. 6. **System Performance Monitoring**: Track API response times, error rates, and uptime using Supabase Edge Functions. 7. **A/B Testing Framework**: Implement a system to test different UI elements and user flows, storing results in the Analytics table. 8. **Conversion Funnel Analysis**: Track users from homepage to completed claims by integrating with the Users and Claims tables. 9. **Revenue Analytics**: Monitor pricing tier adoption and revenue metrics by querying the Users and Claims tables. 10. **Data Export**: Implement functionality to export analytics data for business intelligence, ensuring data is anonymized and privacy-compliant.",
        "testStrategy": "1. Verify that user behavior analytics correctly track wizard completion rates, drop-off points, and user journeys. 2. Test claim success metrics by checking that approval rates, decision times, and refund amounts are accurately monitored. 3. Validate courier performance tracking by ensuring response times and success rates for MRN/EORI requests are correctly analyzed. 4. Check evidence completion rates by verifying that missing evidence types are accurately tracked. 5. Test routing accuracy metrics by comparing routing decisions with actual outcomes. 6. Verify system performance monitoring by checking that API response times, error rates, and uptime are correctly tracked. 7. Validate the A/B testing framework by ensuring different UI elements and user flows are tested and results are stored. 8. Check conversion funnel analysis by tracking users from homepage to completed claims. 9. Test revenue analytics by verifying that pricing tier adoption and revenue metrics are accurately monitored. 10. Validate data export functionality by ensuring analytics data is correctly exported and anonymized.",
        "status": "pending",
        "dependencies": [
          2,
          8
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Pricing and Payment System",
        "description": "Build a comprehensive pricing and payment system to monetize the service, including pricing tiers, payment processing, subscription management, usage tracking, invoice generation, refund handling, tax calculation, payment history, billing notifications, and an admin dashboard.",
        "details": "1. **Pricing Tiers**: Implement Free triage, £9 basic pack, £19 premium pack pricing using a flexible pricing model. 2. **Payment Processing**: Integrate with Stripe for secure payment handling, including one-time payments and recurring subscriptions. 3. **Subscription Management**: Handle recurring payments for micro-seller plans using Stripe's subscription API. 4. **Usage Tracking**: Monitor feature usage to enforce pricing limits by integrating with the existing Supabase backend. 5. **Invoice Generation**: Generate professional invoices for payments using a library like PDFKit. 6. **Refund Handling**: Process refunds and handle payment disputes using Stripe's refund API. 7. **Tax Calculation**: Calculate VAT and other taxes as required using Stripe's tax calculation features. 8. **Payment History**: Track all payments and transactions in the Supabase database. 9. **Billing Notifications**: Send payment reminders and receipts using Supabase Realtime and Edge Functions. 10. **Admin Dashboard**: Manage pricing, payments, and subscriptions through a dedicated admin interface.",
        "testStrategy": "1. Verify that pricing tiers are correctly implemented and displayed. 2. Test Stripe integration by processing test payments and subscriptions. 3. Validate subscription management by checking recurring payments and plan changes. 4. Ensure usage tracking accurately monitors feature usage and enforces limits. 5. Check that invoices are correctly generated and formatted. 6. Test refund handling by processing test refunds and disputes. 7. Validate tax calculation by comparing with manual calculations. 8. Verify that payment history is accurately tracked and displayed. 9. Test billing notifications by sending test reminders and receipts. 10. Validate the admin dashboard by managing pricing, payments, and subscriptions.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-12T16:20:57.733Z",
      "updated": "2025-09-13T23:20:20.308Z",
      "description": "Tasks for master context"
    }
  },
  "frontend-dev": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Next.js project with App Router, TypeScript, and Tailwind CSS",
        "description": "Initialize a new Next.js project with App Router, TypeScript, and Tailwind CSS for the Dutyback Helper webapp. Include Shadcn/UI component library and Lucide icons, and configure the project structure with proper folders for components, pages, and utilities.",
        "details": "1. Use the `create-next-app` CLI to initialize a new Next.js project with the App Router and TypeScript template.\n2. Install Tailwind CSS and configure it with the necessary `tailwind.config.js` and `postcss.config.js` files.\n3. Add the Shadcn/UI component library by following their installation instructions, including the necessary dependencies and configuration.\n4. Integrate Lucide icons by installing the `lucide` package and setting up the icon components.\n5. Organize the project structure with folders for components, pages, and utilities, ensuring a clean and scalable architecture.\n6. Verify that all dependencies are correctly installed and the project runs without errors.",
        "testStrategy": "1. Run the Next.js development server and ensure the app starts without errors.\n2. Check that Tailwind CSS is applied correctly by adding a styled component and verifying it renders as expected.\n3. Confirm that Shadcn/UI components are available and can be imported and used in the app.\n4. Verify that Lucide icons are rendered correctly by using an icon component in a page or component.\n5. Ensure the project structure is organized as described, with clear separation of components, pages, and utilities.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create the homepage component with hero section, value proposition, how it works section, stats preview, FAQ, pricing, and call-to-action button",
        "description": "Develop the homepage component with all required sections and ensure it uses Shadcn/UI components for a modern, responsive UI.",
        "details": "1. Create a new file for the homepage component in the appropriate directory (e.g., `app/homepage/page.tsx`).\n2. Implement the hero section with a visually appealing layout, including a headline, subheadline, and a call-to-action button using Shadcn/UI components.\n3. Add a value proposition section that highlights the key benefits of the product or service.\n4. Implement a 'How It Works' section with a step-by-step explanation, using a card layout or similar.\n5. Include a stats preview section with key metrics or numbers, using Shadcn/UI components like cards or badges.\n6. Add an FAQ section with collapsible items, using Shadcn/UI's accordion component.\n7. Implement a pricing section with different plans, using Shadcn/UI's card or table components.\n8. Ensure all sections are responsive and work across different screen sizes.\n9. Use Tailwind CSS for styling and ensure the UI is modern and visually consistent with the rest of the application.",
        "testStrategy": "1. Run the Next.js development server and navigate to the homepage to ensure it renders without errors.\n2. Verify that all sections (hero, value proposition, how it works, stats, FAQ, pricing, and CTA) are visible and correctly styled.\n3. Test the responsiveness of the homepage by resizing the browser window and ensuring the layout adapts appropriately.\n4. Confirm that Shadcn/UI components are used correctly and that the UI looks consistent with the design guidelines.\n5. Check that the call-to-action button is functional and styled as expected.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Build the claim wizard component with 6 sliding steps",
        "description": "Develop the claim wizard component with 6 sliding steps, including step navigation, form validation, and state management.",
        "details": "1. Create a new file for the claim wizard component in the appropriate directory (e.g., `app/claim-wizard/page.tsx`).\n2. Implement the 6 sliding steps as described: Channel selection (Courier vs Postal), VAT status (Yes/No), Claim type (Overpayment/Rejected/Withdrawal/≤£135), Identifiers (MRN/EORI fields), Evidence checklist, and Review & Export.\n3. Add step navigation (e.g., 'Previous' and 'Next' buttons) to allow users to move between steps.\n4. Implement form validation for each step to ensure required fields are filled and data is correct.\n5. Use state management (e.g., React's useState or a state management library) to track the current step and form data.\n6. Ensure the component is responsive and uses Shadcn/UI components for a consistent UI.\n7. Add error handling and feedback for invalid input.",
        "testStrategy": "1. Run the Next.js development server and navigate to the claim wizard component to ensure it renders without errors.\n2. Verify that all 6 steps are visible and functional, with proper navigation between them.\n3. Test form validation by submitting incomplete or invalid data and ensure appropriate error messages are displayed.\n4. Confirm that the state management correctly tracks the current step and form data.\n5. Test the responsiveness of the component by resizing the browser window.\n6. Ensure that the component integrates well with the rest of the application and uses Shadcn/UI components consistently.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create branch screens for special routing",
        "description": "Develop three branch screens for special routing: BOR286 Postal screen with charge reference form and PDF link, VAT Return Info screen with guidance message, and Seller Refund Info screen with marketplace instructions. Ensure these screens are accessible from the claim wizard based on user selections.",
        "details": "1. Create three new screen components: BOR286PostalScreen, VATReturnInfoScreen, and SellerRefundInfoScreen.\n2. Implement the BOR286 Postal screen with a charge reference form and a PDF link.\n3. Implement the VAT Return Info screen with a guidance message.\n4. Implement the Seller Refund Info screen with marketplace instructions.\n5. Integrate these screens into the claim wizard component, making them accessible based on user selections.\n6. Ensure the screens are styled consistently with Shadcn/UI components and Tailwind CSS.\n7. Add appropriate state management to handle screen transitions and user input.",
        "testStrategy": "1. Run the Next.js development server and navigate to the claim wizard component.\n2. Verify that the three branch screens are accessible based on user selections.\n3. Test the functionality of the charge reference form, PDF link, guidance message, and marketplace instructions.\n4. Ensure the screens are styled correctly and responsive.\n5. Confirm that the screens are properly integrated with the claim wizard's state management.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Build courier playbook modals for DHL, FedEx, and UPS",
        "description": "Develop modals for DHL, FedEx, and UPS that include prewritten request templates, self-serve portal links, contact information, and step-by-step instructions for obtaining MRN and EORI numbers. Add copy-to-clipboard functionality for templates.",
        "details": "1. Create three modal components for DHL, FedEx, and UPS, each containing prewritten request templates, self-serve portal links, contact information, and step-by-step instructions for obtaining MRN and EORI numbers.\n2. Implement copy-to-clipboard functionality for the request templates using JavaScript.\n3. Ensure the modals are accessible from the claim wizard component, based on user selections.\n4. Style the modals consistently with Shadcn/UI components.\n5. Add event handlers to open and close the modals based on user interactions.\n6. Ensure the modals are responsive and accessible on all device sizes.",
        "testStrategy": "1. Run the Next.js development server and navigate to the claim wizard component.\n2. Verify that the DHL, FedEx, and UPS modals are accessible based on user selections.\n3. Test the copy-to-clipboard functionality for the request templates.\n4. Confirm that the modals display the correct content, including portal links, contact information, and instructions.\n5. Ensure the modals are styled consistently with the rest of the application and are responsive on different screen sizes.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create the claims dashboard component with list view of user claims, status indicators, reminder timers for HMRC deadlines, and resume functionality to continue incomplete claims",
        "description": "Develop the claims dashboard component with a list view of user claims, status indicators, reminder timers for HMRC deadlines, and resume functionality to continue incomplete claims. Include filtering, sorting, and search capabilities.",
        "details": "1. Create a new component for the claims dashboard, ensuring it is accessible from the claim wizard or a dedicated route.\n2. Implement a list view of user claims, displaying key information such as claim type, status, and deadline.\n3. Add status indicators (e.g., 'Pending', 'Completed', 'Overdue') to visually represent the claim's state.\n4. Implement reminder timers for HMRC deadlines, showing countdowns or alerts when deadlines are approaching.\n5. Add resume functionality to allow users to continue incomplete claims by loading their progress from the claim wizard.\n6. Include filtering, sorting, and search capabilities to help users navigate the list of claims efficiently.\n7. Ensure the component is styled consistently with Shadcn/UI components and integrates with the existing application state management.\n8. Implement necessary API calls or state management logic to fetch and update claim data.",
        "testStrategy": "1. Run the Next.js development server and navigate to the claims dashboard component.\n2. Verify that the list view of claims is displayed correctly with all relevant information.\n3. Test the status indicators to ensure they reflect the correct state of each claim.\n4. Confirm that the reminder timers for HMRC deadlines are functioning as expected.\n5. Test the resume functionality by starting a claim in the claim wizard, then resuming it from the dashboard.\n6. Verify that filtering, sorting, and search capabilities work as intended.\n7. Ensure the component is responsive and styled consistently with the rest of the application.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Build outcome stats component with interactive charts and responsive design",
        "description": "Develop a component to display approval rate percentage, median decision days, and average refund amount by courier, including interactive charts and responsive design for both homepage preview and dedicated stats page.",
        "details": "1. Create a new component for the outcome stats, ensuring it can be embedded in the homepage preview and a dedicated stats page.\n2. Implement interactive charts (e.g., using Chart.js or D3.js) to visualize approval rate percentage, median decision days, and average refund amount by courier.\n3. Ensure the component is responsive and adapts to different screen sizes and layouts.\n4. Integrate the component into the homepage's stats preview section and a dedicated stats page.\n5. Use Shadcn/UI components for styling and ensure consistency with the rest of the application.\n6. Add data fetching logic to retrieve the required statistics from the backend or a mock data source.\n7. Implement filtering or sorting options if needed, based on user preferences or data availability.",
        "testStrategy": "1. Run the Next.js development server and navigate to the homepage to verify that the stats preview section renders correctly and displays the expected data.\n2. Navigate to the dedicated stats page and ensure the component is displayed and functions as expected.\n3. Test the responsiveness of the component by resizing the browser window and verifying that the layout adjusts appropriately.\n4. Confirm that the interactive charts update and display the correct data based on the underlying dataset.\n5. Validate that the component is styled consistently with the rest of the application using Shadcn/UI components.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Create support and updates page with last checked date comparison, changelog, escalation templates, and help documentation",
        "description": "Develop a support and updates page that displays the last checked date versus GOV.UK, a changelog of policy differences, escalation email templates, and help documentation. Include search functionality and categorized help sections.",
        "details": "1. Create a new page component for the support and updates section.\n2. Implement a section to display the last checked date compared to GOV.UK.\n3. Add a changelog that lists policy differences, including dates and descriptions.\n4. Include escalation email templates for different scenarios.\n5. Develop help documentation with categorized sections (e.g., 'How to Submit a Claim', 'Understanding Refunds').\n6. Implement a search functionality that allows users to search through help documentation and changelog.\n7. Ensure the page is styled consistently with Shadcn/UI components.\n8. Integrate the page into the application's navigation or a dedicated support route.",
        "testStrategy": "1. Run the Next.js development server and navigate to the support and updates page.\n2. Verify that the last checked date is displayed correctly and compared to GOV.UK.\n3. Check that the changelog is updated with policy differences and dates.\n4. Confirm that escalation email templates are visible and correctly formatted.\n5. Test the help documentation sections to ensure they are categorized and accessible.\n6. Use the search functionality to verify that it correctly filters and displays relevant content.\n7. Ensure the page is responsive and styled consistently with the rest of the application.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement global navigation with logo, nav links, and footer",
        "description": "Develop a global navigation system with a logo, navigation links (Features, Stats, Start Claim), and a footer that displays the last checked GOV.UK guidance date and a support link. Include a responsive mobile menu and ensure consistent branding throughout the app.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "details": "1. Create a navigation component that includes a logo, navigation links (Features, Stats, Start Claim), and a responsive mobile menu.\n2. Implement a footer that displays the last checked GOV.UK guidance date and a support link.\n3. Ensure the navigation and footer are consistent with the app's branding, including colors, fonts, and spacing.\n4. Use a responsive design approach to ensure the navigation works on all screen sizes, including mobile.\n5. Integrate the navigation and footer into the main layout of the app, ensuring they are accessible on all pages.\n6. Use Shadcn/UI or a similar component library for consistent UI elements.\n7. Add event handlers for mobile menu toggling and ensure accessibility standards are met.",
        "testStrategy": "1. Run the Next.js development server and navigate to multiple pages of the app to verify that the navigation and footer are consistently displayed.\n2. Check that the mobile menu toggles correctly and is accessible on smaller screens.\n3. Confirm that the last checked GOV.UK guidance date is displayed correctly in the footer.\n4. Verify that the support link in the footer is functional and leads to the correct page.\n5. Ensure the navigation links (Features, Stats, Start Claim) are correctly implemented and lead to the appropriate sections or pages.\n6. Test the responsiveness of the navigation and footer across different screen sizes.",
        "subtasks": [
          {
            "id": 1,
            "title": "Global Layout Integration",
            "description": "Added Navigation and Footer components to the root layout (`layout.tsx`)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Responsive Design Implementation",
            "description": "Implemented navigation with mobile menu and hamburger button",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Consistent Branding",
            "description": "Ensured logo, colors, fonts, and spacing are consistent throughout the app",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Navigation Links Implementation",
            "description": "Added Features, Stats, Detailed Stats, Support, and Start Claim links",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Footer Content Implementation",
            "description": "Added last checked GOV.UK guidance date, support links, and resources",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Page Cleanup",
            "description": "Removed duplicate Navigation/Footer from individual pages",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Sticky Navigation Implementation",
            "description": "Implemented sticky navigation with backdrop blur effect",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Mobile Menu Functionality",
            "description": "Implemented responsive hamburger menu that toggles correctly",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Logo Navigation",
            "description": "Enabled clicking logo to return to homepage",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Active States Implementation",
            "description": "Highlighted current page in navigation",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 11,
            "title": "Footer Resources",
            "description": "Added links to HMRC guidance and contact information",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 12,
            "title": "GOV.UK Date Display",
            "description": "Implemented display of last checked guidance date (currently shows '12 September 2025')",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 13,
            "title": "Navigation and Footer Testing",
            "description": "Verified all navigation links work correctly (Home, Support, Stats, Wizard)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 14,
            "title": "Mobile Menu Testing",
            "description": "Confirmed mobile menu opens/closes and navigates properly",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 15,
            "title": "Global Navigation and Footer Testing",
            "description": "Verified global navigation and footer appear on all pages",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 16,
            "title": "Responsive Design Testing",
            "description": "Tested responsive design on mobile (375px width)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 17,
            "title": "Logo Navigation Testing",
            "description": "Confirmed logo navigation returns to homepage",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 18,
            "title": "Footer Date Testing",
            "description": "Verified footer displays correct GOV.UK guidance date",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 19,
            "title": "Technical Implementation",
            "description": "Used flexbox layout with `flex-1` for main content area",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 20,
            "title": "Sticky Navigation Styling",
            "description": "Implemented sticky navigation with `top-0 z-50`",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 21,
            "title": "Mobile Menu State Management",
            "description": "Used state management for mobile menu toggle",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 22,
            "title": "Footer Link Implementation",
            "description": "Added external links with proper `target=\"_blank\"` and `rel=\"noopener noreferrer\"`",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 23,
            "title": "UI Consistency",
            "description": "All components use Shadcn/UI for consistent styling",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Build form validation and routing logic components",
        "description": "Implement MRN format validation (18 characters), evidence checklist enforcement, HMRC routing rules (postal→BOR286, VAT-registered→VAT Return), and deadline calculations (3 years overpayments, 1 year rejected imports, 90 days withdrawal).",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "details": "1. Create a form validation module that enforces MRN format (18 characters) and validates evidence checklist requirements.\n2. Implement HMRC routing logic that maps postal claims to BOR286 and VAT-registered claims to VAT Return.\n3. Add deadline calculation logic for overpayments (3 years), rejected imports (1 year), and withdrawal (90 days) based on claim submission date.\n4. Integrate the validation and routing logic into the claim wizard component, ensuring it works with the existing claims dashboard and courier playbook modals.\n5. Use TypeScript for type safety and ensure the logic is reusable across different claim types.\n6. Add error handling and user feedback for invalid inputs or missing evidence.",
        "testStrategy": "1. Run the Next.js development server and navigate to the claim wizard component.\n2. Submit a claim with an invalid MRN (e.g., 17 characters) and verify that the validation error is displayed.\n3. Submit a claim with missing evidence and ensure the checklist enforcement prevents submission.\n4. Test HMRC routing logic by submitting a postal claim and verifying it is routed to BOR286, and a VAT-registered claim is routed to VAT Return.\n5. Verify deadline calculations by submitting claims with different dates and confirming the calculated deadlines match the expected values.",
        "subtasks": [
          {
            "id": 1,
            "title": "Enhanced Validation System",
            "description": "Created comprehensive validation logic with detailed error messages",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "HMRC Routing Logic",
            "description": "Implemented complete routing system with all HMRC forms and processes",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Form Validation Hook",
            "description": "Created `useFormValidation` hook for real-time validation",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Route Logic Hook",
            "description": "Created `useRouteLogic` hook for HMRC routing decisions",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Validation Display Components",
            "description": "Built comprehensive validation UI components",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Enhanced Wizard Integration",
            "description": "Updated wizard to use new validation and routing system",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Deadline Calculation Implementation",
            "description": "Added deadline calculation logic for overpayments (3 years), rejected imports (1 year), and withdrawal (90 days) based on claim submission date",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Real-time Validation Enhancement",
            "description": "Implemented step-by-step validation with detailed error messages",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "HMRC Route Determination",
            "description": "Automatic routing to correct HMRC forms (CDS, C285, BOR286, etc.)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Evidence Requirements Implementation",
            "description": "Dynamic evidence requirements based on claim route",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 11,
            "title": "Field-level Error Display",
            "description": "Individual field validation with specific error messages",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 12,
            "title": "Route Information Cards",
            "description": "Detailed information about each HMRC route",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 13,
            "title": "Eligibility Checking",
            "description": "Comprehensive eligibility criteria validation",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-12T16:30:07.346Z",
      "updated": "2025-09-12T18:04:29.645Z",
      "description": "Frontend development tasks for Dutyback Helper webapp"
    }
  }
}